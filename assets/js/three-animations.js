0// Three.js –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è —Å–∞–π—Ç–∞
console.log('üéØ Three.js animations loading...');

// –°–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏
const techStack = [
    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è –∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è
    { name: 'Docker', symbol: 'üê≥', color: 0x2496ED, logo: 'assets/images/tech-logos/docker.svg' },
    { name: 'Kubernetes', symbol: '‚ò∏Ô∏è', color: 0x326CE5, logo: 'assets/images/tech-logos/kubernetes.svg' },
    
    // CI/CD –∏ DevOps –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    { name: 'Jenkins', symbol: 'J', color: 0xD33833, logo: 'assets/images/tech-logos/jenkins.svg' },
    { name: 'GitLab', symbol: 'G', color: 0xFC6D26, logo: 'assets/images/tech-logos/gitlab.svg' },
    { name: 'Git', symbol: 'üîó', color: 0xF05032, logo: 'assets/images/tech-logos/git.svg' },
    { name: 'GitHub', symbol: 'üêô', color: 0x181717, logo: 'assets/images/tech-logos/github.svg' },
    { name: 'Bitbucket', symbol: 'B', color: 0x0052CC, logo: 'assets/images/tech-logos/bitbucket.svg' },
    { name: 'Airflow', symbol: 'A', color: 0x017CEE, logo: 'assets/images/tech-logos/airflow.svg' },
    { name: 'SonarQube', symbol: 'S', color: 0x4E9BCD, logo: 'assets/images/tech-logos/sonarqube.svg' },
    { name: 'Jira', symbol: 'J', color: 0x0052CC, logo: 'assets/images/tech-logos/jira.svg' },
    { name: 'Confluence', symbol: 'C', color: 0x172B4D, logo: 'assets/images/tech-logos/confluence.svg' },
    
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    { name: 'Grafana', symbol: 'üìä', color: 0xF46800, logo: 'assets/images/tech-logos/grafana.svg' },
    { name: 'Prometheus', symbol: 'P', color: 0xE6522C, logo: 'assets/images/tech-logos/prometheus.svg' },
    { name: 'Elasticsearch', symbol: 'E', color: 0x005571, logo: 'assets/images/tech-logos/elasticsearch.svg' },
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    { name: 'Ansible', symbol: 'A', color: 0xEE0000, logo: 'assets/images/tech-logos/ansible.svg' },
    { name: 'Bash', symbol: 'üíª', color: 0x4EAA25, logo: 'assets/images/tech-logos/bash.svg' },
    { name: 'Python', symbol: 'üêç', color: 0x3776AB, logo: 'assets/images/tech-logos/python.svg' },
    
    // –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    { name: 'PostgreSQL', symbol: 'üêò', color: 0x336791, logo: 'assets/images/tech-logos/postgresql.svg' },
    { name: 'MySQL', symbol: 'M', color: 0x4479A1, logo: 'assets/images/tech-logos/mysql.svg' },
    { name: 'MongoDB', symbol: 'üçÉ', color: 0x47A248, logo: 'assets/images/tech-logos/mongodb.svg' },
    { name: 'Redis', symbol: 'R', color: 0xDC382D, logo: 'assets/images/tech-logos/redis.svg' },
    { name: 'Kafka', symbol: 'K', color: 0x231F20, logo: 'assets/images/tech-logos/kafka.svg' },
    
    // –°–µ—Ç–µ–≤—ã–µ –∏ –≤–µ–±-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
    { name: 'Nginx', symbol: 'N', color: 0x269539, logo: 'assets/images/tech-logos/nginx.svg' },
    { name: 'HAProxy', symbol: 'H', color: 0x106da9, logo: 'assets/images/tech-logos/haproxy.svg' },
    
    // –û–° –∏ –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è
    { name: 'Linux', symbol: 'üêß', color: 0xFCC624, logo: 'assets/images/tech-logos/linux.svg' },
    { name: 'Ubuntu', symbol: 'U', color: 0xE95420, logo: 'assets/images/tech-logos/ubuntu.svg' },
    { name: 'Debian', symbol: 'D', color: 0xA81D33, logo: 'assets/images/tech-logos/debian.svg' },
    
    // –û–±–ª–∞–∫–æ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    { name: 'AWS', symbol: '‚òÅÔ∏è', color: 0xFF9900, logo: 'assets/images/tech-logos/aws.svg' },
    { name: 'MinIO', symbol: 'M', color: 0xC72E29, logo: 'assets/images/tech-logos/minio.svg' },
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è–º–∏
    { name: 'Vault', symbol: 'üîí', color: 0x000000, logo: 'assets/images/tech-logos/vault.svg' },
    { name: 'Bitwarden', symbol: 'B', color: 0x175DDC, logo: 'assets/images/tech-logos/bitwarden.svg' },
    
    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è
    { name: 'Rancher', symbol: 'R', color: 0x0075A8, logo: 'assets/images/tech-logos/rancher.svg' },
    
    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    { name: 'Zabbix', symbol: 'Z', color: 0xD40000, logo: 'assets/images/tech-logos/zabbix.svg' },
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ (fallback –±–µ–∑ –ª–æ–≥–æ—Ç–∏–ø–æ–≤)
    { name: 'Terraform', symbol: 'T', color: 0x7B42BC },
    { name: 'Nexus', symbol: 'N', color: 0x00A9CE },
    { name: 'Artifactory', symbol: 'A', color: 0x41BF47 },
    { name: 'Keycloak', symbol: 'K', color: 0x4d4d4d },
    { name: 'Logstash', symbol: 'L', color: 0xFEC514 },
    { name: 'Kibana', symbol: 'K', color: 0xE8478B },
    { name: 'Opensearch', symbol: 'O', color: 0x005eb8 },
    { name: 'Superset', symbol: 'S', color: 0x20A7C9 },
    { name: 'KVM', symbol: 'V', color: 0xE1251B },
    { name: 'Helm', symbol: 'H', color: 0x0F1689 },
    { name: 'ArgoCD', symbol: 'üöÄ', color: 0xEF7B4D },
    { name: 'Microtik', symbol: 'M', color: 0x293137 },
    { name: 'RocketChat', symbol: 'R', color: 0xF5455C }
];

class ThreeJSAnimations {
    constructor(performanceLevel = 'medium') {
        this.heroScene = null;
        this.heroRenderer = null;
        this.heroCamera = null;
        this.particles = null;
        this.animationId = null;
        
        // Tech logos
        this.techLogos = [];
        this.techLogosGroup = null;
        this.logoTextures = new Map();
        
        // Skills sections
        this.skillsScenes = {};
        this.skillsRenderers = {};
        this.skillsCameras = {};
        this.skillsObjects = {};
        
        // Performance settings
        this.settings = performanceSettings[performanceLevel];
        this.performanceLevel = performanceLevel;
        
        this.init();
    }

    init() {
        if (typeof THREE === 'undefined') {
            console.error('‚ùå Three.js not loaded');
            return;
        }
        
        console.log('‚úÖ Three.js loaded, initializing animations...');
        this.initHeroBackground();
        this.initSkillsAnimations();
        this.setupEventListeners();
    }

    initHeroBackground() {
        const canvas = document.getElementById('hero-canvas');
        if (!canvas) {
            console.warn('‚ö†Ô∏è Hero canvas not found');
            return;
        }

        // –°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω—É
        this.heroScene = new THREE.Scene();
        
        // –°–æ–∑–¥–∞–µ–º –∫–∞–º–µ—Ä—É
        this.heroCamera = new THREE.PerspectiveCamera(
            75, 
            window.innerWidth / window.innerHeight, 
            0.1, 
            1000
        );
        this.heroCamera.position.z = 30;

        // –°–æ–∑–¥–∞–µ–º —Ä–µ–Ω–¥–µ—Ä–µ—Ä
        this.heroRenderer = new THREE.WebGLRenderer({
            canvas: canvas,
            alpha: true,
            antialias: true
        });
        this.heroRenderer.setSize(window.innerWidth, window.innerHeight);
        this.heroRenderer.setPixelRatio(Math.min(window.devicePixelRatio, this.settings.pixelRatio));

        // –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É —á–∞—Å—Ç–∏—Ü (—É–º–µ–Ω—å—à–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
        this.createParticleSystem();
        
        // –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–≥–æ—Ç–∏–ø—ã
        // this.createGeometricShapes();
        
        // –°–æ–∑–¥–∞–µ–º –ª–µ—Ç–∞—é—â–∏–µ –ª–æ–≥–æ—Ç–∏–ø—ã —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
        this.createTechLogos();

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        this.animateHero();
        
        console.log('‚úÖ Hero 3D background initialized');
    }

    initSkillsAnimations() {
        const skillsCanvases = [
            { id: 'devops-canvas', type: 'devops', color: 0x3B82F6 },
            { id: 'security-canvas', type: 'security', color: 0x8B5CF6 },
            { id: 'development-canvas', type: 'development', color: 0x10B981 }
        ];

        skillsCanvases.forEach(canvasConfig => {
            this.initSkillCanvas(canvasConfig);
        });
    }

    initSkillCanvas({ id, type, color }) {
        const canvas = document.getElementById(id);
        if (!canvas) {
            console.warn(`‚ö†Ô∏è Canvas ${id} not found`);
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        const parent = canvas.parentElement;
        const rect = parent.getBoundingClientRect();

        // –°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω—É
        const scene = new THREE.Scene();
        
        // –°–æ–∑–¥–∞–µ–º –∫–∞–º–µ—Ä—É
        const camera = new THREE.PerspectiveCamera(75, rect.width / rect.height, 0.1, 1000);
        camera.position.z = 15;

        // –°–æ–∑–¥–∞–µ–º —Ä–µ–Ω–¥–µ—Ä–µ—Ä
        const renderer = new THREE.WebGLRenderer({
            canvas: canvas,
            alpha: true,
            antialias: true
        });
        renderer.setSize(rect.width, rect.height);
        renderer.setPixelRatio(Math.min(window.devicePixelRatio, this.settings.pixelRatio));

        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        const objects = this.createSkillObjects(type, color);
        objects.forEach(obj => scene.add(obj));

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏
        this.skillsScenes[type] = scene;
        this.skillsCameras[type] = camera;
        this.skillsRenderers[type] = renderer;
        this.skillsObjects[type] = objects;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–µ–¥–µ–Ω–∏—è
        this.addSkillHoverEffect(canvas, type);

        console.log(`‚úÖ ${type} 3D animation initialized`);
    }

    createSkillObjects(type, color) {
        const objects = [];

        switch (type) {
            case 'devops':
                // –°–æ–∑–¥–∞–µ–º —à–µ—Å—Ç–µ—Ä–µ–Ω–∫–∏ –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
                for (let i = 0; i < this.settings.skillObjects.devops; i++) {
                    const geometry = new THREE.CylinderGeometry(0.5, 0.8, 0.3, 6);
                    const material = new THREE.MeshBasicMaterial({
                        color: color,
                        wireframe: true,
                        transparent: true,
                        opacity: 0.6
                    });
                    const cylinder = new THREE.Mesh(geometry, material);
                    
                    cylinder.position.set(
                        (Math.random() - 0.5) * 20,
                        (Math.random() - 0.5) * 15,
                        (Math.random() - 0.5) * 10
                    );
                    
                    objects.push(cylinder);
                }
                break;

            case 'security':
                // –°–æ–∑–¥–∞–µ–º —â–∏—Ç—ã –∏ –∑–∞—â–∏—Ç–Ω—ã–µ –±–∞—Ä—å–µ—Ä—ã
                for (let i = 0; i < this.settings.skillObjects.security; i++) {
                    const geometry = new THREE.SphereGeometry(1, 8, 8);
                    const material = new THREE.MeshBasicMaterial({
                        color: color,
                        wireframe: true,
                        transparent: true,
                        opacity: 0.7
                    });
                    const sphere = new THREE.Mesh(geometry, material);
                    
                    sphere.position.set(
                        (Math.random() - 0.5) * 18,
                        (Math.random() - 0.5) * 12,
                        (Math.random() - 0.5) * 8
                    );
                    
                    objects.push(sphere);
                }
                break;

            case 'development':
                // –°–æ–∑–¥–∞–µ–º –∫–æ–¥-–±–ª–æ–∫–∏ –∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
                for (let i = 0; i < this.settings.skillObjects.development; i++) {
                    const geometry = new THREE.BoxGeometry(1, 1, 1);
                    const material = new THREE.MeshBasicMaterial({
                        color: color,
                        wireframe: true,
                        transparent: true,
                        opacity: 0.5
                    });
                    const cube = new THREE.Mesh(geometry, material);
                    
                    cube.position.set(
                        (Math.random() - 0.5) * 16,
                        (Math.random() - 0.5) * 10,
                        (Math.random() - 0.5) * 6
                    );
                    
                    objects.push(cube);
                }
                break;
        }

        return objects;
    }

    addSkillHoverEffect(canvas, type) {
        const parent = canvas.parentElement;
        
        parent.addEventListener('mouseenter', () => {
            const objects = this.skillsObjects[type];
            if (objects) {
                objects.forEach(obj => {
                    obj.material.opacity = 1.0;
                    obj.scale.setScalar(1.2);
                });
            }
        });

        parent.addEventListener('mouseleave', () => {
            const objects = this.skillsObjects[type];
            if (objects) {
                objects.forEach(obj => {
                    obj.material.opacity = 0.6;
                    obj.scale.setScalar(1.0);
                });
            }
        });
    }

    createParticleSystem() {
        const particleCount = this.settings.particleCount;
        const positions = new Float32Array(particleCount * 3);
        const velocities = new Float32Array(particleCount * 3);

        for (let i = 0; i < particleCount * 3; i += 3) {
            // –ü–æ–∑–∏—Ü–∏–∏
            positions[i] = (Math.random() - 0.5) * 100;     // x
            positions[i + 1] = (Math.random() - 0.5) * 100; // y
            positions[i + 2] = (Math.random() - 0.5) * 100; // z
            
            // –°–∫–æ—Ä–æ—Å—Ç–∏
            velocities[i] = (Math.random() - 0.5) * 0.02;
            velocities[i + 1] = (Math.random() - 0.5) * 0.02;
            velocities[i + 2] = (Math.random() - 0.5) * 0.02;
        }

        const geometry = new THREE.BufferGeometry();
        geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
        geometry.setAttribute('velocity', new THREE.BufferAttribute(velocities, 3));

        const material = new THREE.PointsMaterial({
            color: 0x64B5F6,
            size: 2,
            transparent: true,
            opacity: 0.8,
            blending: THREE.AdditiveBlending
        });

        this.particles = new THREE.Points(geometry, material);
        this.heroScene.add(this.particles);
    }

    createGeometricShapes() {
        // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ñ–∏–≥—É—Ä
        const shapes = [];
        
        // –¢–æ—Ä
        const torusGeometry = new THREE.TorusGeometry(8, 2, 8, 20);
        const torusMaterial = new THREE.MeshBasicMaterial({
            color: 0x667EEA,
            wireframe: true,
            transparent: true,
            opacity: 0.3
        });
        const torus = new THREE.Mesh(torusGeometry, torusMaterial);
        torus.position.set(-20, 10, -20);
        shapes.push(torus);

        // –û–∫—Ç–∞—ç–¥—Ä
        const octahedronGeometry = new THREE.OctahedronGeometry(6);
        const octahedronMaterial = new THREE.MeshBasicMaterial({
            color: 0x764BA2,
            wireframe: true,
            transparent: true,
            opacity: 0.4
        });
        const octahedron = new THREE.Mesh(octahedronGeometry, octahedronMaterial);
        octahedron.position.set(25, -15, -30);
        shapes.push(octahedron);

        // –ò–∫–æ—Å–∞—ç–¥—Ä
        const icosahedronGeometry = new THREE.IcosahedronGeometry(5);
        const icosahedronMaterial = new THREE.MeshBasicMaterial({
            color: 0x3B82F6,
            wireframe: true,
            transparent: true,
            opacity: 0.35
        });
        const icosahedron = new THREE.Mesh(icosahedronGeometry, icosahedronMaterial);
        icosahedron.position.set(-15, -20, -25);
        shapes.push(icosahedron);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–∏–≥—É—Ä—ã –≤ —Å—Ü–µ–Ω—É
        shapes.forEach(shape => {
            this.heroScene.add(shape);
        });

        this.geometricShapes = shapes;
    }

    async createTechLogos() {
        console.log('üéØ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ª–æ–≥–æ—Ç–∏–ø—ã...');
        
        // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤
        this.techLogosGroup = new THREE.Group();
        
        // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º SVG –ª–æ–≥–æ—Ç–∏–ø—ã
        await this.preloadLogoTextures();
        
        // –°–æ–∑–¥–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, –≥–¥–µ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
        const logoTechs = techStack.filter(tech => tech.logo && this.logoTextures.has(tech.name));
        console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${logoTechs.length} —Ä–µ–∞–ª—å–Ω—ã—Ö –ª–æ–≥–æ—Ç–∏–ø–æ–≤:`, logoTechs.map(t => t.name));
        
        // –ë–∞–ª–∞–Ω—Å –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –∏ —á–∞—Å—Ç–∏—Ü
        const totalLogos = Math.max(25, this.settings.techLogos); // –ú–∏–Ω–∏–º—É–º 25 –ª–æ–≥–æ—Ç–∏–ø–æ–≤
        
        for (let i = 0; i < totalLogos; i++) {
            if (logoTechs.length === 0) {
                console.warn('‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è');
                break; 
            }
            
            const tech = logoTechs[i % logoTechs.length];
            const logoSprite = this.createRealLogoSprite(tech);
            
            if (!logoSprite) {
                console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–ø—Ä–∞–π—Ç –¥–ª—è ${tech.name}`);
                continue;
            }
            
            // –°–ª—É—á–∞–π–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±–æ–ª—å—à–µ–π –æ–±–ª–∞—Å—Ç–∏
            logoSprite.position.set(
                (Math.random() - 0.5) * 140,
                (Math.random() - 0.5) * 90,
                (Math.random() - 0.5) * 70
            );
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
            const scale = 3 + Math.random() * 4; // –û—Ç 3 –¥–æ 7
            logoSprite.scale.set(scale, scale, 1);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
            logoSprite.userData = {
                tech: tech,
                originalScale: scale,
                rotationSpeed: (Math.random() - 0.5) * 0.008,
                floatSpeed: (Math.random() - 0.5) * 0.006,
                floatAmplitude: Math.random() * 1.5,
                time: Math.random() * Math.PI * 2,
                velocity: {
                    x: (Math.random() - 0.5) * 0.015,
                    y: (Math.random() - 0.5) * 0.012,
                    z: (Math.random() - 0.5) * 0.008
                }
            };
            
            this.techLogos.push(logoSprite);
            this.techLogosGroup.add(logoSprite);
        }
        
        this.heroScene.add(this.techLogosGroup);
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${this.techLogos.length} –ª–µ—Ç–∞—é—â–∏—Ö –ª–æ–≥–æ—Ç–∏–ø–æ–≤ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π`);
    }

    async preloadLogoTextures() {
        const promises = [];
        
        for (const tech of techStack) {
            if (tech.logo) {
                const promise = this.loadSVGAsTransparentTexture(tech.logo, tech.name);
                promises.push(promise);
            }
        }
        
        await Promise.all(promises);
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.logoTextures.size} –ø—Ä–æ–∑—Ä–∞—á–Ω—ã—Ö –ª–æ–≥–æ—Ç–∏–ø–æ–≤`);
    }

    async loadSVGAsTransparentTexture(svgPath, techName) {
        return new Promise((resolve) => {
            console.log(`üì• –ó–∞–≥—Ä—É–∂–∞–µ–º ${techName} –∏–∑ ${svgPath}`);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π TextureLoader –¥–ª—è SVG
            const loader = new THREE.TextureLoader();
            loader.load(
                svgPath,
                (texture) => {
                    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω ${techName}`);
                    this.logoTextures.set(techName, texture);
                    resolve(texture);
                },
                (progress) => {
                    console.log(`üìä –ó–∞–≥—Ä—É–∑–∫–∞ ${techName}: ${Math.round(progress.loaded / progress.total * 100)}%`);
                },
                (error) => {
                    console.warn(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${techName}:`, error);
                    // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ Image
                    this.loadSVGViaImage(svgPath, techName).then(resolve);
                }
            );
        });
    }

    async loadSVGViaImage(svgPath, techName) {
        return new Promise((resolve) => {
            const img = new Image();
            img.crossOrigin = 'anonymous';
            
            img.onload = () => {
                // –°–æ–∑–¥–∞–µ–º canvas –∏ —Ä–∏—Å—É–µ–º SVG
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');
                canvas.width = 256;
                canvas.height = 256;
                
                // –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É
                const size = Math.min(img.width, img.height);
                const scale = 200 / size; // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–æ 200px
                const width = img.width * scale;
                const height = img.height * scale;
                const x = (256 - width) / 2;
                const y = (256 - height) / 2;
                
                ctx.drawImage(img, x, y, width, height);
                
                // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É
                const texture = new THREE.CanvasTexture(canvas);
                texture.needsUpdate = true;
                
                console.log(`‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ ${techName} —É—Å–ø–µ—à–Ω–∞`);
                this.logoTextures.set(techName, texture);
                resolve(texture);
            };
            
            img.onerror = () => {
                console.warn(`‚ùå –ü–æ–ª–Ω—ã–π –ø—Ä–æ–≤–∞–ª –∑–∞–≥—Ä—É–∑–∫–∏ ${techName}`);
                resolve(null);
            };
            
            img.src = svgPath;
        });
    }

    createRealLogoSprite(tech) {
        const logoTexture = this.logoTextures.get(tech.name);
        
        if (!logoTexture) {
            console.warn(`‚ö†Ô∏è –ù–µ—Ç —Ç–µ–∫—Å—Ç—É—Ä—ã –¥–ª—è ${tech.name}`);
            return null;
        }
        
        // –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        const material = new THREE.SpriteMaterial({
            map: logoTexture,
            transparent: true,
            opacity: 0.85,
            alphaTest: 0.3, // –£–±–∏—Ä–∞–µ–º –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –∫—Ä–∞—è
            blending: THREE.NormalBlending
        });
        
        const sprite = new THREE.Sprite(material);
        return sprite;
    }

    createTransparentLogoSprite(tech) {
        const canvas = document.createElement('canvas');
        const context = canvas.getContext('2d');
        const size = 64;
        
        canvas.width = size;
        canvas.height = size;
        
        // –ù–ï –†–ò–°–£–ï–ú –§–û–ù - –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        context.textAlign = 'center';
        context.textBaseline = 'middle';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
        let fontSize = size * 0.5;
        let fontFamily = 'Arial, sans-serif';
        
        // –î–ª—è —ç–º–æ–¥–∑–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if (tech.symbol.length > 1 || /[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|[\u{1F1E0}-\u{1F1FF}]/u.test(tech.symbol)) {
            fontSize = size * 0.7;
            fontFamily = 'Apple Color Emoji, Segoe UI Emoji, sans-serif';
        }
        
        context.font = `${fontSize}px ${fontFamily}`;
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—É—Ä (–æ–±–≤–æ–¥–∫—É)
        context.lineWidth = 3;
        context.strokeStyle = `#${tech.color.toString(16).padStart(6, '0')}`;
        context.strokeText(tech.symbol, size / 2, size / 2);
        
        // –ó–∞–ª–∏–≤–∞–µ–º —Å–∏–º–≤–æ–ª –±–µ–ª—ã–º
        context.fillStyle = 'white';
        context.fillText(tech.symbol, size / 2, size / 2);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –æ–±–≤–æ–¥–∫—É –¥–ª—è —è—Ä–∫–æ—Å—Ç–∏
        context.lineWidth = 1;
        context.strokeStyle = `#${Math.floor(tech.color * 0.8).toString(16).padStart(6, '0')}`;
        context.strokeText(tech.symbol, size / 2, size / 2);
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É
        const texture = new THREE.CanvasTexture(canvas);
        texture.needsUpdate = true;
        
        // –ú–∞—Ç–µ—Ä–∏–∞–ª —Å –ø–æ–ª–Ω–æ–π –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é —Ñ–æ–Ω–∞
        const material = new THREE.SpriteMaterial({
            map: texture,
            transparent: true,
            opacity: 0.9,
            alphaTest: 0.2, // –£–±–∏—Ä–∞–µ–º –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏
            blending: THREE.NormalBlending
        });
        
        const sprite = new THREE.Sprite(material);
        sprite.scale.set(5, 5, 1);
        
        return sprite;
    }

    animateHero() {
        this.animationId = requestAnimationFrame(() => this.animateHero());

        // –ê–Ω–∏–º–∞—Ü–∏—è —á–∞—Å—Ç–∏—Ü (—É–º–µ–Ω—å—à–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
        if (this.particles) {
            const positions = this.particles.geometry.attributes.position.array;
            const velocities = this.particles.geometry.attributes.velocity.array;

            for (let i = 0; i < positions.length; i += 3) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
                positions[i] += velocities[i];
                positions[i + 1] += velocities[i + 1];
                positions[i + 2] += velocities[i + 2];

                // –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
                if (Math.abs(positions[i]) > 50) velocities[i] *= -1;
                if (Math.abs(positions[i + 1]) > 50) velocities[i + 1] *= -1;
                if (Math.abs(positions[i + 2]) > 50) velocities[i + 2] *= -1;
            }

            this.particles.geometry.attributes.position.needsUpdate = true;
            this.particles.rotation.y += 0.001;
        }

        // –ê–Ω–∏–º–∞—Ü–∏—è –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ñ–∏–≥—É—Ä –æ—Ç–∫–ª—é—á–µ–Ω–∞
        // if (this.geometricShapes) { ... }

        // –ê–Ω–∏–º–∞—Ü–∏—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
        if (this.techLogos.length > 0) {
            this.animateTechLogos();
        }

        // –ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
        const time = Date.now() * 0.0005;
        this.heroCamera.position.x = Math.sin(time) * 2;
        this.heroCamera.position.y = Math.cos(time * 0.7) * 1;

        // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥
        this.heroRenderer.render(this.heroScene, this.heroCamera);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞–≤—ã–∫–æ–≤
        this.animateSkills();
    }

    animateTechLogos() {
        const time = Date.now() * 0.001;
        
        this.techLogos.forEach((logo, index) => {
            const userData = logo.userData;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
            userData.time += userData.floatSpeed;
            
            // –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —Å velocity
            logo.position.x += userData.velocity.x;
            logo.position.y += userData.velocity.y;
            logo.position.z += userData.velocity.z;
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–ª–∞–≤–∞—é—â–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
            logo.position.y += Math.sin(userData.time) * userData.floatAmplitude * 0.003;
            logo.position.x += Math.cos(userData.time * 0.7) * 0.002;
            
            // –ü–ª–∞–≤–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ
            logo.rotation.z += userData.rotationSpeed;
            
            // –õ–µ–≥–∫–∞—è –ø—É–ª—å—Å–∞—Ü–∏—è
            const pulseFactor = 1 + Math.sin(time * 1.5 + index) * 0.08;
            logo.scale.set(
                userData.originalScale * pulseFactor,
                userData.originalScale * pulseFactor,
                1
            );
            
            // –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è - –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç –≥—Ä–∞–Ω–∏—Ü
            const bounds = { x: 70, y: 45, z: 30 };
            
            if (logo.position.x > bounds.x || logo.position.x < -bounds.x) {
                userData.velocity.x *= -0.9; // –ù–µ–±–æ–ª—å—à–æ–µ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ
                logo.position.x = Math.max(-bounds.x, Math.min(bounds.x, logo.position.x));
            }
            if (logo.position.y > bounds.y || logo.position.y < -bounds.y) {
                userData.velocity.y *= -0.9;
                logo.position.y = Math.max(-bounds.y, Math.min(bounds.y, logo.position.y));
            }
            if (logo.position.z > bounds.z || logo.position.z < -bounds.z) {
                userData.velocity.z *= -0.9;
                logo.position.z = Math.max(-bounds.z, Math.min(bounds.z, logo.position.z));
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ö–∞–æ—Ç–∏—á–Ω–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è
            if (Math.random() < 0.003) {
                userData.velocity.x += (Math.random() - 0.5) * 0.001;
                userData.velocity.y += (Math.random() - 0.5) * 0.001;
                userData.velocity.z += (Math.random() - 0.5) * 0.0005;
                
                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
                const maxSpeed = 0.025;
                userData.velocity.x = Math.max(-maxSpeed, Math.min(maxSpeed, userData.velocity.x));
                userData.velocity.y = Math.max(-maxSpeed, Math.min(maxSpeed, userData.velocity.y));
                userData.velocity.z = Math.max(-maxSpeed, Math.min(maxSpeed, userData.velocity.z));
            }
        });
        
        // –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –≤—Å–µ–π –≥—Ä—É–ø–ø—ã
        if (this.techLogosGroup) {
            this.techLogosGroup.rotation.y += 0.0008;
        }
    }

    animateSkills() {
        const time = Date.now() * 0.001;
        
        // –ê–Ω–∏–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –≤ –∫–∞–∂–¥–æ–π —Å–µ–∫—Ü–∏–∏ –Ω–∞–≤—ã–∫–æ–≤
        Object.keys(this.skillsObjects).forEach(type => {
            const objects = this.skillsObjects[type];
            const scene = this.skillsScenes[type];
            const camera = this.skillsCameras[type];
            const renderer = this.skillsRenderers[type];
            
            if (objects && scene && camera && renderer) {
                objects.forEach((obj, index) => {
                    switch (type) {
                        case 'devops':
                            obj.rotation.y += 0.01 + index * 0.002;
                            obj.rotation.z += 0.005;
                            break;
                        case 'security':
                            obj.rotation.x += 0.008 + index * 0.001;
                            obj.rotation.y += 0.006;
                            obj.position.y += Math.sin(time + index) * 0.005;
                            break;
                        case 'development':
                            obj.rotation.x += 0.007;
                            obj.rotation.y += 0.009 + index * 0.001;
                            obj.position.x += Math.cos(time + index) * 0.003;
                            break;
                    }
                });
                
                renderer.render(scene, camera);
            }
        });
    }

    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        window.addEventListener('resize', () => this.onWindowResize());
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
        document.addEventListener('mousemove', (event) => this.onMouseMove(event));

        // –ü–∞—É–∑–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
        document.addEventListener('visibilitychange', () => {
            if (document.hidden) {
                this.pauseAnimation();
            } else {
                this.resumeAnimation();
            }
        });
    }

    onWindowResize() {
        if (!this.heroCamera || !this.heroRenderer) return;

        this.heroCamera.aspect = window.innerWidth / window.innerHeight;
        this.heroCamera.updateProjectionMatrix();
        this.heroRenderer.setSize(window.innerWidth, window.innerHeight);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas –¥–ª—è –Ω–∞–≤—ã–∫–æ–≤
        Object.keys(this.skillsRenderers).forEach(type => {
            const renderer = this.skillsRenderers[type];
            const camera = this.skillsCameras[type];
            const canvas = renderer.domElement;
            const parent = canvas.parentElement;
            
            if (parent) {
                const rect = parent.getBoundingClientRect();
                camera.aspect = rect.width / rect.height;
                camera.updateProjectionMatrix();
                renderer.setSize(rect.width, rect.height);
            }
        });
    }

    onMouseMove(event) {
        if (!this.heroCamera) return;

        const mouseX = (event.clientX / window.innerWidth) * 2 - 1;
        const mouseY = -(event.clientY / window.innerHeight) * 2 + 1;

        // –ü–ª–∞–≤–Ω–æ–µ —Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã –∑–∞ –º—ã—à—å—é
        this.heroCamera.position.x += (mouseX * 5 - this.heroCamera.position.x) * 0.05;
        this.heroCamera.position.y += (mouseY * 5 - this.heroCamera.position.y) * 0.05;
        
        // –õ–æ–≥–æ—Ç–∏–ø—ã –ù–ï —Ä–µ–∞–≥–∏—Ä—É—é—Ç –Ω–∞ –º—ã—à—å - –ª–µ—Ç–∞—é—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ
    }

    pauseAnimation() {
        if (this.animationId) {
            cancelAnimationFrame(this.animationId);
            this.animationId = null;
        }
    }

    resumeAnimation() {
        if (!this.animationId) {
            this.animateHero();
        }
    }

    destroy() {
        this.pauseAnimation();
        
        if (this.heroRenderer) {
            this.heroRenderer.dispose();
        }
        
        if (this.heroScene) {
            this.heroScene.clear();
        }
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
function getDevicePerformance() {
    const canvas = document.createElement('canvas');
    const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
    
    if (!gl) return 'low';
    
    const debugInfo = gl.getExtension('WEBGL_debug_renderer_info');
    const renderer = debugInfo ? gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL) : '';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    const isLowEndDevice = renderer.includes('Adreno') && (renderer.includes('3') || renderer.includes('4'));
    
    if (isMobile || isLowEndDevice) return 'low';
    if (navigator.hardwareConcurrency <= 2) return 'medium';
    
    return 'high';
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
const performanceSettings = {
    low: {
        particleCount: 100, // –£–º–µ–Ω—å—à–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞
        skillObjects: { devops: 3, security: 2, development: 4 },
        techLogos: 15,
        pixelRatio: 1,
        antialias: false
    },
    medium: {
        particleCount: 250, // –£–º–µ–Ω—å—à–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞
        skillObjects: { devops: 5, security: 4, development: 6 },
        techLogos: 25,
        pixelRatio: 1.5,
        antialias: true
    },
    high: {
        particleCount: 400, // –£–º–µ–Ω—å—à–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞
        skillObjects: { devops: 8, security: 6, development: 10 },
        techLogos: 40,
        pixelRatio: 2,
        antialias: true
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
let threeAnimations = null;

function initThreeJS() {
    if (typeof THREE !== 'undefined') {
        const performance = getDevicePerformance();
        console.log(`üéØ Device performance: ${performance}`);
        
        threeAnimations = new ThreeJSAnimations(performance);
        console.log('üéØ Three.js animations initialized');
    } else {
        console.warn('‚ö†Ô∏è Three.js not available, retrying...');
        setTimeout(initThreeJS, 500);
    }
}

// –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        setTimeout(initThreeJS, 100);
    });
} else {
    setTimeout(initThreeJS, 100);
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
window.threeAnimations = threeAnimations;
